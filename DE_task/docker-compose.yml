x-postgresql-connection-env: &pg-connect
  POSTGRESQL_APP_HOST: ${POSTGRESQL_APP_HOST}
  POSTGRESQL_APP_DB: ${POSTGRESQL_APP_DB}
  POSTGRESQL_APP_SCHEMA: ${POSTGRESQL_APP_SCHEMA}
  POSTGRESQL_APP_USER: ${POSTGRESQL_APP_USER}
  POSTGRESQL_APP_PASSWORD: ${POSTGRESQL_APP_PASSWORD}

x-mysql-connection-env: &mysql-connect
  MYSQL_APP_HOST: ${MYSQL_APP_HOST}
  MYSQL_APP_DB: ${MYSQL_APP_DB}
  MYSQL_APP_USER: ${MYSQL_APP_USER}
  MYSQL_APP_PASSWORD: ${MYSQL_APP_PASSWORD}

x-airflow-common: &airflow-common
  build:
    context: ./airflow # Указываем путь до директории с Dockerfile для Airflow
    dockerfile: Dockerfile
  image: my-airflow-image:latest # Имя образа, которое будет собрано
  environment:
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: ${AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK}
    AIRFLOW_UID: ${AIRFLOW_UID}
  env_file:
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/spark_jobs:/opt/airflow/spark_jobs
    - ./airflow/jars:/opt/airflow/jars
    - /var/run/docker.sock:/var/run/docker.sock

services:
  mysql:
    build: ./db/mysql
    container_name: mysql
    hostname: ${MYSQL_APP_HOST}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      <<: *mysql-connect
      # Пароль от root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    env_file:
      - .env

    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5

    restart: always

  postgres:
    build: ./db/postgresql
    container_name: postgres
    hostname: ${POSTGRESQL_APP_HOST}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      <<: *pg-connect
      # Пароль от root
      POSTGRES_PASSWORD: ${POSTGRESQL_ROOT_PASSWORD}
    env_file:
      - .env

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    restart: always

  datagen:
    build: ./datagen
    container_name: pg_datagen
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *pg-connect
      AI_USER_ID: ${AI_USER_ID}
      AI_API_KEY: ${AI_API_KEY}
    restart: no

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
      - postgres:
        condition: service_healthy
      - mysql:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      - airflow-webserver
      - postgres:
        condition: service_healthy
      - mysql:
        condition: service_healthy
    deploy:
    resources:
      limits:
        cpus: '1'
        memory: 1G

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username admin --password admin --firstname FIRST_NAME --lastname LAST_NAME --role Admin --email example@email.com"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

volumes:
  mysql_data:
  postgres_data: